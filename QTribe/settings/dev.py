"""
Django settings for QTribe project.

Generated by 'django-admin startproject' using Django 4.2.22.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_DIR2 = Path(__file__).resolve().parent.parent.parent
#添加导包路径
sys.path.insert(0,os.path.join(BASE_DIR,'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7*3tmx7*vk-i@v1)yq3o9x492aq0h0bbkj0to153(l0m%)_#3a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', 'www.nagle.cn','localhost']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'user',
    'pieces_info',
    'verify_code',
    'index',
    'oauth',
    'haystack',
    'django_celery_results',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'QTribe.urls'

TEMPLATES = [
{
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        # jinja2模板引擎
        'DIRS': [os.path.join(BASE_DIR2, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'index.context_processors.set_icon_flag',
                'index.context_processors.get_message',
            ],
            # 补充Jinja2模板引擎环境
            'environment': 'QTribe.utils.jinja2_env.environment',
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR2/'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

            ],
        },
    },
]

WSGI_APPLICATION = 'QTribe.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'qtribe',
        'HOST': '192.168.221.129',
        'USER': 'root',
        'PASSWORD': 'root',
        'POST': 3306
    }
}

#修改默认用户模型
AUTH_USER_MODEL='user.UserModel'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

#规定静态文件
STATIC_URL = '/static/'

STATICFILES_DIRS=[
    os.path.join(BASE_DIR2,'static')
]

MEDIA_URL='/media/'

MEDIA_ROOT= BASE_DIR2 / 'media'
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#redis数据库配置
CACHES = {
    "default": {  # 默认
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {  # session
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_code": {  # 验证码
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

#规定日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁⽤已经存在的⽇志器
    'formatters': {  # ⽇志信息显示的格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 对⽇志进⾏过滤
        'require_debug_true': {  # django在debug模式下才输出⽇志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # ⽇志处理⽅法
        'console': {  # 向终端中输出⽇志
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {  # 向⽂件中输出⽇志
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs/qtribe.log'),  # ⽇志⽂件的位置
            'maxBytes': 300 * 1024 * 1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {  # ⽇志器
        'django': {  # 定义了⼀个名为django的⽇志器
            'handlers': ['console', 'file'],  # 可以同时向终端与⽂件中输出⽇志
            'propagate': True,  # 是否继续传递⽇志信息
            'level': 'INFO',  # ⽇志器接收的最低⽇志级别
        },
    }
}

#发送短信验证码
APIID = 'C45813408'
APIKEY = '28b334224f4475ca2a2472a5847af522'

# QQ登录的配置参数
QQ_CLIENT_ID = '101917966'  # app id
QQ_REDIRECT_URI = 'http://www.nagle.cn:8083/about'  # 回调地址
QQ_APP_KEY = '20fcc768255829c08fa4efbe8acf0001'  # app key

# 微信登录的配置参数
WECHAT_CLIENT_ID = 'wx2a6cf9373f278ed2'  # app id
# WECHAT_CLIENT_ID = 'wxc358bf43a8cdccd5'  # app id
WECHAT_REDIRECT_URI = 'http://www.nagle.cn:8083/weixin'  # 回调地址
WECHAT_APP_KEY = 'b32af04d9062ebc44b3f5d8b87a5a48e'  # app key
# WECHAT_APP_KEY = 'dd2fa2be153ab8b25fec8d3230dca662'  # app key

# haystack相关配置
HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE':
            'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine'
        ,
        'URL': 'http://192.168.221.129:9200/',  # Elasticsearch服务器ip地址，端⼝号固定为9200

        'INDEX_NAME': 'article',  # Elasticsearch建⽴的索引库的名称
        # 排除掉其他的索引模型
        'EXCLUDED_INDEXES': ['pieces_info.search_indexes.VideoModelIndex',
                             'pieces_info.search_indexes.LifeModelIndex',
                             'user.search_indexes.UserModelIndex'],
    },
    'video': {
        'ENGINE':
            'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine'
        ,
        'URL': 'http://192.168.221.129:9200/',  # Elasticsearch服务器ip地址，端⼝号固定为9200

        'INDEX_NAME': 'video',  # Elasticsearch建⽴的索引库的名称
        # 排除掉其他的索引模型
        'EXCLUDED_INDEXES': ['pieces_info.search_indexes.ArticleModelIndex',
                             'pieces_info.search_indexes.LifeModelIndex',
                             'user.search_indexes.UserModelIndex'],
    },
    'life': {
        'ENGINE':
            'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine'
        ,
        'URL': 'http://192.168.221.129:9200/',  # Elasticsearch服务器ip地址，端⼝号固定为9200

        'INDEX_NAME': 'life',  # Elasticsearch建⽴的索引库的名称
        # 排除掉其他的索引模型
        'EXCLUDED_INDEXES': ['pieces_info.search_indexes.ArticleModelIndex',
                             'pieces_info.search_indexes.VideoModelIndex',
                             'user.search_indexes.UserModelIndex'],
    },
    'user': {
        'ENGINE':
            'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine'
        ,
        'URL': 'http://192.168.221.129:9200/',  # Elasticsearch服务器ip地址，端⼝号固定为9200

        'INDEX_NAME': 'user',  # Elasticsearch建⽴的索引库的名称
        # 排除掉其他的索引模型
        'EXCLUDED_INDEXES': ['pieces_info.search_indexes.ArticleModelIndex',
                             'pieces_info.search_indexes.VideoModelIndex',
                             'pieces_info.search_indexes.LifeModelIndex'],
    },
}

# 当添加、修改、删除数据时，⾃动⽣成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'

#celery配置
CELERY_TIMEZONE = "Asia/Shanghai"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_CACHE_BACKEND = 'redis://127.0.0.1:6379/4'
CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/5'
CELERY_RESULT_SERIALIZER='json'

DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880